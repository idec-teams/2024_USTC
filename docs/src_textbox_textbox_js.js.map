{"version":3,"file":"src_textbox_textbox_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAjHA;AAAA;AAAA;AAkHA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;AChKA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA","sources":["webpack://2024_ustc/./src/textbox/textbox.js","webpack://2024_ustc/./src/textbox/chunk.eft","webpack://2024_ustc/./src/textbox/citation.eft","webpack://2024_ustc/./src/textbox/em.eft","webpack://2024_ustc/./src/textbox/h1.eft","webpack://2024_ustc/./src/textbox/h2.eft","webpack://2024_ustc/./src/textbox/img.eft","webpack://2024_ustc/./src/textbox/li.eft","webpack://2024_ustc/./src/textbox/mark.eft","webpack://2024_ustc/./src/textbox/ol.eft","webpack://2024_ustc/./src/textbox/pre.eft","webpack://2024_ustc/./src/textbox/span.eft","webpack://2024_ustc/./src/textbox/strong.eft","webpack://2024_ustc/./src/textbox/sub.eft","webpack://2024_ustc/./src/textbox/sup.eft","webpack://2024_ustc/./src/textbox/textbox.eft","webpack://2024_ustc/./src/textbox/textboxcontainer.eft","webpack://2024_ustc/./src/textbox/ul.eft"],"sourcesContent":["import Textbox from \"./textbox.eft\";\r\nimport ol from \"./ol.eft\";\r\nimport li from \"./li.eft\";\r\nimport pre from \"./pre.eft\";\r\nimport img from \"./img.eft\";\r\nimport h1 from \"./h1.eft\";\r\nimport h2 from \"./h2.eft\";\r\nimport mark from \"./mark.eft\";\r\nimport textboxcontainer from \"./textboxcontainer.eft\";\r\nimport ul from \"./ul.eft\";\r\nimport em from \"./em.eft\";\r\nimport chunk from \"./chunk.eft\";\r\nimport span from \"./span.eft\";\r\nimport strong from \"./strong.eft\";\r\nimport citation from \"./citation.eft\";\r\nimport sub from \"./sub.eft\";\r\nimport sup from \"./sup.eft\";\r\n//输入textobj，挂载用的list，实例化的挂载对象\r\nfunction textcreate(obj, list, text) {\r\n  obj.forEach((element) => {\r\n    if (element.strong) {\r\n      text.list.push(new strong({ $data: { text: element.strong } }));\r\n    } else if (element.em) {\r\n      text.list.push(new em({ $data: { text: element.em } }));\r\n    } else if (element.span) {\r\n      text.list.push(new span({ $data: { text: element.span } }));\r\n    }else if (element.sup) {\r\n      text.list.push(new sup({ $data: { text: element.sup } }));\r\n    }else if (element.sub) {\r\n      text.list.push(new sub({ $data: { text: element.sub } }));\r\n    } else if (element.citation) {\r\n      text.list.push(\r\n        new citation({\r\n          $data: { text: element.citation.text, href: element.citation.href },\r\n        })\r\n      );\r\n    } else {\r\n      text.list.push(new chunk({ $data: { text: element.text } }));\r\n    }\r\n  });\r\n  list.push(text);\r\n}\r\nfunction textboxcreate(textlist) {\r\n  const TBC = new textboxcontainer();\r\n  for (let [key, value] of Object.entries(textlist)) {\r\n    if (key === \"mark\") {\r\n      TBC.list.push(new mark({ $data: { mark: value } }));\r\n    } else {\r\n      const textbox = new Textbox({});\r\n      value.forEach((element) => {\r\n        const markpoint = element.mark !== undefined;\r\n        const image = !markpoint && element.src !== undefined;\r\n        const orderedlist =\r\n          !markpoint && !image && element.ollist !== undefined;\r\n        const unorderedlist =\r\n          !orderedlist && !markpoint && !image && element.ullist !== undefined;\r\n        const preformattedtext =\r\n          !unorderedlist && !markpoint && !image && !orderedlist;\r\n\r\n        if (preformattedtext) {\r\n          if (element.title) {\r\n            if (typeof element.title === \"string\") {\r\n              textbox.textlist.push(\r\n                new h1({ $data: { title: element.title, id: element.title } })\r\n              );\r\n            } else {\r\n              let id = \"\";\r\n              element.title.forEach((element) => {\r\n                for (let [a, b] of Object.entries(element)) {\r\n                  id += b;\r\n                }\r\n              });\r\n              const h1text = new h1({ $data: { id: id } });\r\n              textcreate(element.title, textbox.textlist, h1text);\r\n            }\r\n          }\r\n          if (element.subtitle) {\r\n            if (typeof element.subtitle === \"string\") {\r\n              textbox.textlist.push(\r\n                new h2({\r\n                  $data: { subtitle: element.subtitle, id: element.subtitle },\r\n                })\r\n              );\r\n            } else {\r\n              let id = \"\";\r\n              element.subtitle.forEach((element) => {\r\n                for (let [a, b] of Object.entries(element)) {\r\n                  id += b;\r\n                }\r\n              });\r\n              const h2text = new h2({ $data: { id: id } });\r\n              textcreate(element.subtitle, textbox.textlist, h2text);\r\n            }\r\n          }\r\n          if (element.text) {\r\n            if (typeof element.text === \"string\") {\r\n              textbox.textlist.push(new pre({ $data: { text: element.text } }));\r\n            } else {\r\n              let title = \"\";\r\n              for (let [a, b] of Object.entries(element.text)) {\r\n                title = title + b;\r\n              }\r\n              const pretext = new pre();\r\n              textcreate(element.text, textbox.textlist, pretext);\r\n            }\r\n          }\r\n        } else if (image) {\r\n          if (typeof element.text === \"string\") {\r\n            textbox.textlist.push(\r\n              new img({\r\n                $data: {\r\n                  text: element.text,\r\n                  image_name: element.image_name,\r\n                  src: element.src,\r\n                },\r\n              })\r\n            );\r\n          } else {\r\n            const imgtext = new img({\r\n              $data: { image_name: element.image_name, src: element.src },\r\n            });\r\n            textcreate(element.text, textbox.textlist, imgtext);\r\n          }\r\n        } else if (orderedlist) {\r\n          const ollist = new ol();\r\n          element.ollist.forEach((lielement) => {\r\n            if (typeof lielement.text === \"string\") {\r\n              ollist.ollist.push(new li({ $data: { text: lielement.text } }));\r\n            } else {\r\n              const lilist = new li();\r\n              textcreate(lielement.text, ollist.ollist, lilist);\r\n            }\r\n          });\r\n          textbox.textlist.push(ollist);\r\n        } else if (unorderedlist) {\r\n          const ullist = new ul();\r\n          element.ullist.forEach((lielement) => {\r\n            if (typeof lielement.text === \"string\") {\r\n              ullist.ullist.push(new li({ $data: { text: lielement.text } }));\r\n            } else {\r\n              const lilist = new li();\r\n              textcreate(lielement.text, ullist.ullist, lilist);\r\n            }\r\n          });\r\n          textbox.textlist.push(ullist);\r\n        } else if (markpoint) {\r\n          textbox.textlist.push(\r\n            new mark({\r\n              $data: {\r\n                mark: element.mark,\r\n              },\r\n            })\r\n          );\r\n        }\r\n      });\r\n      TBC.list.push(textbox);\r\n    }\r\n  }\r\n  TBC.$mount({ target: document.body });\r\n}\r\nexport default textboxcreate;\r\n","import { create } from 'ef-core';\nexport default class Chunk extends create([{t:0},[['text']]]) {\n};\n","import { create } from 'ef-core';\nexport default class Citation extends create([{t:'a',a:{class:'citation',href:[0,[['href']]]}},[{t:'sup'},'[',[['text']],']']]) {\n};\n","import { create } from 'ef-core';\nexport default class Em extends create([{t:'em'},[['text']]]) {\n};\n","import { create } from 'ef-core';\nexport default class H1 extends create([{t:'h1',a:{id:[0,[['id']]]}},[['title']],{n:'list',t:1}]) {\n};\n","import { create } from 'ef-core';\nexport default class H2 extends create([{t:0},[{t:'h2',a:{id:[0,[['id']]]}},[['subtitle']],{n:'list',t:1}],[{t:'br'}]]) {\n};\n","import { create } from 'ef-core';\nexport default class Img extends create([{t:0},[{t:'div',a:{class:'img',id:[0,[['image_name']]]}},[{t:'img',a:{src:[0,[['src']]]}}],[{t:'br'}],[{t:'p'},[['text']],{n:'list',t:1}]],[{t:'br'}]]) {\n};\n","import { create } from 'ef-core';\nexport default class Li extends create([{t:'li'},[['text']],{n:'list',t:1}]) {\n};\n","import { create } from 'ef-core';\nexport default class Mark extends create([{t:0},[{t:'div',a:{class:'mark',id:[0,[['mark']]]}}],[{t:'br'}]]) {\n};\n","import { create } from 'ef-core';\nexport default class Ol extends create([{t:0},[{t:'ol'},[['text']],{n:'ollist',t:1}],[{t:'br'}]]) {\n};\n","import { create } from 'ef-core';\nexport default class Pre extends create([{t:0},[{t:'pre'},[['text']],{n:'list',t:1}],[{t:'br'}]]) {\n};\n","import { create } from 'ef-core';\nexport default class Span extends create([{t:'span',a:{class:[0,[['style']]]}},[['text']]]) {\n};\n","import { create } from 'ef-core';\nexport default class Strong extends create([{t:'strong'},[['text']]]) {\n};\n","import { create } from 'ef-core';\nexport default class Sub extends create([{t:'sub'},[['text']]]) {\n};\n","import { create } from 'ef-core';\nexport default class Sup extends create([{t:'sup'},[['text']]]) {\n};\n","import { create } from 'ef-core';\nexport default class Textbox extends create([{t:'div',a:{class:'container'}},[{t:'div',a:{class:'textbox'}},[{t:'div',a:{class:'text'}},{n:'textlist',t:1}]]]) {\n};\n","import { create } from 'ef-core';\nexport default class Textboxcontainer extends create([{t:'div',a:{class:'textbox-container'}},{n:'list',t:1}]) {\n};\n","import { create } from 'ef-core';\nexport default class Ul extends create([{t:0},[{t:'ul'},[['text']],{n:'ullist',t:1}],[{t:'br'}]]) {\n};\n"],"names":[],"sourceRoot":""}